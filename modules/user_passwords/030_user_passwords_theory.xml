<?hard-pagebreak?>
<section><title>passwd</title>
	<para>Passwords of users can be set with the <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command. Users will have to provide their old password before twice entering the new one.</para>
	<screen>[harry@RHEL4 ~]$ passwd
Changing password for user harry.
Changing password for harry
(current) UNIX password: 
New UNIX password: 
BAD PASSWORD: it's WAY too short
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[harry@RHEL4 ~]$</screen>
	<para>As you can see, the passwd tool will do some basic verification to prevent users from using too simple passwords. The root user does not have to follow these rules (there will be a warning though). The root user also does not have to provide the old password before entering the new password twice.</para>
</section>
<section><title>shadow file</title>
	<para>User passwords are encrypted and kept in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm>. The /etc/shadow file is read only and can only be read by root. We will see in the file permissions section how it is possible for users to change their password. For now, you will have to know that users can change their password with the <command>/usr/bin/passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command.</para>
	<screen>[root@RHEL5 ~]# tail /etc/shadow
inge:$1$yWMSimOV$YsYvcVKqByFVYLKnU3ncd0:14054:0:99999:7:::
ann:!!:14054:0:99999:7:::
frederik:!!:14054:0:99999:7:::
steven:!!:14054:0:99999:7:::
pascale:!!:14054:0:99999:7:::
geert:!!:14054:0:99999:7:::
wim:!!:14054:0:99999:7:::
sandra:!!:14054:0:99999:7:::
annelies:!!:14054:0:99999:7:::
laura:$1$Tvby1Kpa$lL.WzgobujUS3LClIRmdv1:14054:0:99999:7:::</screen>
	<para>The <command>/etc/shadow</command> file contains nine colon separated columns. The nine fields contain (from left to right) the user name, the encrypted password (note that only inge and laura have an encrypted password), the day the password was last changed (day 1 is January 1, 1970), number of days the password must be left unchanged, password expiry day, warning number of days before password expiry, number of days after expiry before disabling the account, and the day the account was disabled (again, since 1970). The last field has no meaning yet.</para>
</section>
<?hard-pagebreak?>
<section><title>password encryption</title>
	<section><title>encryption with passwd</title>
		<para>Passwords are stored in an encrypted format. This encryption is done by the <command>crypt</command><indexterm><primary>crypt</primary></indexterm> function. The easiest (and recommended) way to add a user with a password to the system is to add the user with the <command>useradd -m user</command><indexterm><primary>useradd(1)</primary></indexterm> command, and then set the user's password with <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm>.</para>
		<screen>[root@RHEL4 ~]# useradd -m xavier
[root@RHEL4 ~]# passwd xavier
Changing password for user xavier.
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[root@RHEL4 ~]#</screen>
	</section>
	<section><title>encryption with openssl</title>
		<para>Another way to create users with a password is to use the -p option of useradd, but that option requires an encrypted password. You can generate this encrypted password with the <command>openssl passwd</command><indexterm><primary>openssl(1)</primary></indexterm> command.</para>
		<para>The <command>openssl passwd</command> command will generate several distinct hashes for the same password, for this it uses a <command>salt</command>.</para>
		<screen>paul@rhel65:~$ openssl passwd hunter2
86jcUNlnGDFpY
paul@rhel65:~$ openssl passwd hunter2
Yj7mDO9OAnvq6
paul@rhel65:~$ openssl passwd hunter2
YqDcJeGoDbzKA
paul@rhel65:~$</screen>
		<para>This <command>salt</command> can be chosen and is visible as the first two characters of the hash.</para>
		<screen>paul@rhel65:~$ openssl passwd -salt 42 hunter2
42ZrbtP1Ze8G.
paul@rhel65:~$ openssl passwd -salt 42 hunter2
42ZrbtP1Ze8G.
paul@rhel65:~$ openssl passwd -salt 42 hunter2
42ZrbtP1Ze8G.
paul@rhel65:~$</screen>
		<para>This example shows how to create a user with an automatic password. Note that the password is recorded in your command history!</para>
		<screen>root@rhel65:~# useradd -m -p $(openssl passwd hunter2) mohamed</screen>
	</section>
<?hard-pagebreak?>
	<section><title>encryption with crypt</title>
		<para>A third option is to create your own C program using the crypt function, and compile this into a command.</para>
		<screen>paul@rhel65:~$ cat MyCrypt.c
#include &#060;stdio.h&#062;
#define __USE_XOPEN
#include &#060;unistd.h&#062;

int main(int argc, char** argv)
{
 if(argc==3)
   {
       printf("%s\n", crypt(argv[1],argv[2]));
   }
   else
   {
       printf("Usage: MyCrypt $password $salt\n" );
   }
  return 0;
}</screen>
		<para>This little program can be compiled with <command>gcc</command><indexterm><primary>gcc(1)</primary></indexterm> like this.</para>
		<screen>paul@redhat65:~$ gcc MyCrypt.c -o MyCrypt -lcrypt</screen>
		<para>To use it, we need to give two parameters to MyCrypt. The first is the unencrypted password, the second is the salt. The salt is used to perturb the encryption algorithm in one of 4096 different ways. This variation prevents two users with the same password from having the same entry in <command>/etc/shadow</command>.</para>
		<screen>paul@rhel65:~$ ./MyCrypt hunter2 42
42ZrbtP1Ze8G.
paul@rhel65:~$ ./MyCrypt hunter2 33
33d6taYSiEUXI</screen>
		<para>Did you notice that the first two characters of the password are the <command>salt</command><indexterm><primary>salt (encryption)</primary></indexterm>?</para>
		<para>The standard output of the crypt function is using the DES algorithm which is old and can be cracked in minutes. A better method is to use <command>md5</command><indexterm><primary>md5</primary></indexterm> passwords which can be recognized by a salt starting with $1$.</para>
		<screen>paul@rhel65:~$ ./MyCrypt hunter2 '$1$42'
$1$42$7l6Y3xT5282XmZrtDOF9f0
paul@rhel65:~$ ./MyCrypt hunter2 '$6$42'
$6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...</screen>
		<para>The <command>md5</command> salt can be up to eight characters long. The salt is displayed in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm> between the second and third $, so never use the password as the salt!</para>
		<screen>paul@rhel65:~$ ./MyCrypt hunter2 '$1$hunter2'
$1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>password defaults</title>
	<section><title>/etc/login.defs</title>
		<para>The <command>/etc/login.defs</command><indexterm><primary>/etc/login.defs</primary></indexterm> file contains some default settings for user passwords like password aging and length settings. (You will also find the numerical limits of user ids and group ids and whether or not a home directory should be created by default).</para>
		<screen>root@rhel65:~# grep ^PASS /etc/login.defs
PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7</screen>
	</section>
	<section><title>chage</title>
		<para>The <command>chage</command><indexterm><primary>chage(1)</primary></indexterm> command can be used to set an expiration date for a user account (-E), set a minimum (-m) and maximum (-M) password age, a password expiration date, and set the number of warning days before the password expiration date. Much of this functionality is also available from the <command>passwd</command><indexterm><primary>passwd</primary></indexterm> command. The <command>-l</command> option of chage will list these settings for a user.</para>
	<screen>root@rhel65:~# chage -l paul
Last password change                                    : Mar 27, 2014
Password expires                                        : never
Password inactive                                       : never
Account expires                                         : never
Minimum number of days between password change          : 0
Maximum number of days between password change          : 99999
Number of days of warning before password expires       : 7
root@rhel65:~#</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>disabling a password</title>
	<para>Passwords in <command>/etc/shadow</command> cannot begin with an exclamation mark. When the second field in /etc/passwd starts with an exclamation mark, then the password can not be used.</para>
	<para>Using this feature is often called <command>locking</command>, <command>disabling</command>, or <command>suspending</command> a user account. Besides vi (or vipw) you can also accomplish this with <command>usermod</command><indexterm><primary>usermod(1)</primary></indexterm>.</para>
	<para>The first line in the next screenshot will disable the password of user harry, making it impossible for harry to authenticate using this password.</para>
	<screen>[root@RHEL4 ~]# usermod -L harry
[root@RHEL4 ~]# tail -1 /etc/shadow
harry:!$1$143TO9IZ$RLm/FpQkpDrV4/Tkhku5e1:13717:0:99999:7:::</screen>
	<para>The root user (and users with <command>sudo</command><indexterm><primary>sudo</primary></indexterm> rights on <command>su</command>) still will be able to <command>su</command><indexterm><primary>su</primary></indexterm> to harry (because the password is not needed here). Also note that harry will still be able to login if he has set up passwordless ssh!</para>
	<screen>[root@RHEL4 ~]# su - harry
[harry@RHEL4 ~]$</screen>
	<para>You can unlock the account again with <command>usermod -U</command><indexterm><primary>usermod(1)</primary></indexterm>.</para>
	<para>Watch out for tiny differences in the command line options of <command>passwd</command>, <command>usermod</command>, and <command>useradd</command> on different distributions! Verify the local files when using features like <command>"disabling, suspending, or locking"</command> users and passwords!</para>
</section>
<section><title>editing local files</title>
        <para>If you still want to manually edit the <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> or <command>/etc/shadow</command><indexterm><primary>/etc/passwd</primary></indexterm>, after knowing these commands for password management, then use <command>vipw</command><indexterm><primary>vipw(1)</primary></indexterm> instead of vi(m) directly. The <command>vipw</command> tool will do proper locking of the file.</para>
        <screen>[root@RHEL5 ~]# vipw /etc/passwd
vipw: the password file is busy (/etc/ptmp present)</screen>
</section>
